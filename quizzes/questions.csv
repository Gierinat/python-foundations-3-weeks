Week,Question,Answer,Explanation,Review
1,"Which of these are valid variable names?\nEnter all correct letters, separated by spaces (e.g. 'X Y Z')\nA) _helloWorld1\nB) hello-world-1\nC) 1_hello_world\nD) H3LL0W0RLD\nE) Hello.World.1","right = {'A', 'D'}\nguesses = set(ans.split(' '))\ncorrect = right == guesses or right == {guess.upper() for guess in guesses}","A and D are valid names (but neither of them are ideal).\n\nVariable names cannot:\n- Contain dashes or dots (only letters, numbers and underscores)\n- Start with a number\n- Be a reserved keyword, like 'if', 'True', or 'return'","Variable are covered in Step 2 of Scenario 2\n  https://learning.oreilly.com/scenarios/hands-on-python-foundations/9780137904648X002/\nAnd Lesson 2.2 of Introduction to Python LiveLessons\n  https://learning.oreilly.com/videos/introduction-to-python/9780135707333/9780135707333-INPY_01_02_02/"
1,"What type of error do you get if you try to use a variable that hasn't been defined?","guess = ans.lower().replace(' ', '')\ncorrect = guess in ['nameerror', 'name']","You would get a NameError.\nThis would also happen if you misspell anything or use the wrong case.","NameErrors are covered in the FAQs section of Step 1 in Scenario 2\n  https://learning.oreilly.com/scenarios/hands-on-python-foundations/9780137904648X002/"
1,"What would the result of this be (or input 'e' for error):\n'hi' * 3 + 'bye' * 2 + 1","correct = ans.lower() == 'e'","It produces a TypeError because you are trying to use the + operator on a mix of strings and integers\n=> 'hihihi' + 'byebyebye' + 1",TypeErrors are covered in Step 2 of Scenario 2\nMultiplying strings with integers is discussed in Step 4 of Scenario 2\n  https://learning.oreilly.com/scenarios/hands-on-python-foundations/9780137904648X002/
1,"Which statement best describes getting errors in Python?\nA) They are a normal part of programming, but are best to be avoided\nB) They happen frequently and you need to get good at fixing them\nC) They show that you don't know what you're doing\nD) They are really bad and can break your computer","correct = ans.upper() == 'B'","Errors are a part of all programmers lives, both novice and experienced.\nExperienced programmers may be able to diagnose an error faster and may easily avoid basic ones.\nThey may also try to anticipate errors that could arise when their program gets into an unexpected state.\n\nYou can avoid SyntaxErrors and NameErrors by using a smart IDE for your development, like PyCharm.","Reading error messages is covered in Step 4 of Scenario 2\n  https://learning.oreilly.com/scenarios/hands-on-python-foundations/9780137904648X002/\nAnd lesson of Introduction to Python LiveLessons\n  https://learning.oreilly.com/videos/introduction-to-python/9780135707333/9780135707333-INPY_01_02_03/\n\nWe will look at how to handle errors gracefully in Scenario 5\n  https://learning.oreilly.com/scenarios/hands-on-python-foundations/9780137904648X005/"
1,"What would 'HeLlO wOrLd'.title().swapcase() return?","correct = ans.strip(&apos;&quot;&apos;).strip(&quot;&apos;&quot;) == 'HeLlO wOrLd'.title().swapcase()","'HeLlO wOrLd'.title() would return 'Hello World'\n'Hello World'.swapcase() would return 'hELLO wORLD'\n\nSince a string is returned from each of these, you can chain them together.","String methods are covered in Step 5 of Scenario 2\n  https://learning.oreilly.com/scenarios/hands-on-python-foundations/9780137904648X002/\nAnd Lesson 2.7 of Introduction to Python LiveLessons\n  https://learning.oreilly.com/videos/introduction-to-python/9780135707333/9780135707333-INPY_01_02_07/"
1,"What would the value of 'num' be, given the following code:\n\ndef next_num(n):\n\tif n % 2 == 0:\n\t\treturn n // 2\n\treturn n*3 + 1\n\nnum = next_num(next_num(next_num(9)))","correct = ans == '7'","The answer is 7.\nYou can nest function calls.\n\nnum = next_num(next_num(next_num(9))) is like saying:\n- num = next_num(9)  # 28\n- num = next_num(28)  # 14\n- num = next_num(14)  # 7\n- num = 7","Functions are covered in Step 1 of Scenario 3\n  https://learning.oreilly.com/scenarios/hands-on-python-foundations/9780137904648X003/\nAnd Lesson 2.6 of Introduction to Python LiveLessons\n  https://learning.oreilly.com/videos/introduction-to-python/9780135707333/9780135707333-INPY_01_02_06/"
1,"Recursive functions are ones that call themselves. Here's one:\ndef my_func(n):\n\tif n == 1:\n\t\treturn 1\n\treturn n + my_func(n - 1)\n\nWhat would my_func(4) return?","correct = ans == '10'","The answer is 10.\n\nThis could be expanded to:\n- 4 + my_func(3)\n- 4 + 3 + my_func(2)\n- 4 + 3 + 2 + my_func(1)\n- 4 + 3 + 2 + 1\n- 10","Functions are covered in Step 1 of Scenario 3\n  https://learning.oreilly.com/scenarios/hands-on-python-foundations/9780137904648X003/\nAnd Lesson 2.6 of Introduction to Python LiveLessons\n  https://learning.oreilly.com/videos/introduction-to-python/9780135707333/9780135707333-INPY_01_02_06/"
1,"What message would be printed out to the console?\n\nmsg = ''\nif 3 < 3:\n\t msg += 'a'\nelif 3 <= 3:\n\t msg += 'b'\n\t if 3 >= 3:\n\t\t msg += 'c'\nelif 3 == 3:\n\t msg += 'd'\nif 3 != 3:\n\t msg += 'e'\nelse:\n\t msg += 'f'\nprint(msg)","correct = ans == 'bcf'","The answer is 'bcf'\n\nExplanation:\n- no 'a': 3 is not less than 3\n- yes 'b': 3 is equal to 3\n- yes 'c': 'b' was reached and it is in the same code block (and 3 >= 3)\n- no 'd': even though it is True, a previous condition was met, so it isn't evaluated\n- no 'e': it's a new if-statement, so it is evaluated, but it is not met (!= means 'not equal')\n- yes 'f': the previous condition was not met","Comparisons (True or False) are covered in Step 2 of Scenario 3\nIf-statements (conditionals) are covered in Step 3 of Scenario 3\n  https://learning.oreilly.com/scenarios/hands-on-python-foundations/9780137904648X003/\nAnd Lessons 3.2 (comparisons) and 3.3 (if-statements) of Introduction to Python LiveLessons\n  https://learning.oreilly.com/videos/introduction-to-python/9780135707333/9780135707333-INPY_01_03_02/\n  https://learning.oreilly.com/videos/introduction-to-python/9780135707333/9780135707333-INPY_01_03_03/"
1,"When will a while-loop stop looping?\nEnter all correct letters, separated by spaces (e.g. 'X Y Z')\nA) When the 'continue' keyword is reached\nB) When the 'break' keyword is reached\nC) When the 'while' condition is False\nD) When the 'while' condition is True\nE) When the program is stopped by the user","correct = {guess.upper() for guess in ans.split()} == {'B', 'C', 'E'}","B, C and E are correct.\n\nTo stop a program manually:\n- In the command line, hit CTRL + C\n- In the PyCharm Run tab, hit the stop button","While-loops are covered in Step 4 of Scenario 3\n  https://learning.oreilly.com/scenarios/hands-on-python-foundations/9780137904648X003/\nAnd Lesson 4.1 of Introduction to Python LiveLessons\n  https://learning.oreilly.com/videos/introduction-to-python/9780135707333/9780135707333-INPY_01_04_01/"
1,"What would be the final value of x, given:\n\nx = ''\nfor quack in range(4):\n\tif quack % 2 == 0:\n\t\tx += 'a' * quack\n\telse:\n\t\tx += 'b' * quack","correct = ans == 'baabbb'","The answer is 'baabbb'.\n\nKey points:\n- range(n) returns the numbers 0, 1, ..., n-1, so range(4) returns 0, 1, 2, 3\n- The variable 'quack' will start with the value of 0, then 1, then 2, and finally 3\n- num % 2 == 0 checks if a number is even. The modulo operator (%) returns the remainder of num / 2\n- x += 'a' * quack will add 'quack' number of 'a's to 'x'\n\nIn this example, you can see the importance of good variable names.\n- The variable 'quack' is normally 'i', but it can have any name\n- The variable name 'x' is usually used for integers, not strings\n\nNote: for-loops might be a difficult concept to grasp if you are completely new to programming.","For-loops are covered in Step 4 of Scenario 3\n  https://learning.oreilly.com/scenarios/hands-on-python-foundations/9780137904648X003/\nAnd Lesson 4.4 of Introduction to Python LiveLessons\n  https://learning.oreilly.com/videos/introduction-to-python/9780135707333/9780135707333-INPY_01_04_04/"
2,"Given the code:\n\nmy_list = []\nfor i in range(5):\n\tif i % 2 == 0:\n\t\tmy_list.append(i)\n\telse:\n\t\tmy_list.insert(0, i)\n\nprint(my_list[::-1])\n\nWhat would get printed to the console?","correct = ans == '[4, 2, 0, 1, 3]'","The answer is [4, 2, 0, 1, 3].\n\nExplanation:\n- range(5) goes through the numbers 0, 1, 2, 3, 4\n- Even numbers get added to the end with my_list.append(i)\n- Odd numbers get added to the front with my_list.insert(0, i)\n- This results in the list [3, 1, 0, 2, 4]\n- my_list[::-1] reverses it","Lists are covered in Step 1 of Scenario 4\n  https://learning.oreilly.com/scenarios/hands-on-python-foundations/9780137904648X004/\nAnd Lesson 4.3 of Introduction to Python LiveLessons\n  https://learning.oreilly.com/videos/introduction-to-python/9780135707333/9780135707333-INPY_01_04_03/"
2,"Given the code:\n\nmy_dict = {}\ntext = 'Oh hello there'\nfor char in text:\n\tif char not in my_dict:\n\t\tmy_dict[char] = 0\n\tmy_dict[char] += 1\n\nHow many items in my_dict have a value of 2?","correct = ans == '2'","The answer is 2: the 'l' and ' ' keys.\n\nThis code counts the number of occurrences of each character in the text.\nKeys are case-sensitive and any string can be a key, including ' '.\n\nmy_dict = {'O': 1, 'h': 3, ' ': 2, 'e': 3, 'l': 2, 'o': 1, 't': 1, 'r': 1}","Dictionaries are covered in Step 2 of Scenario 4\n  https://learning.oreilly.com/scenarios/hands-on-python-foundations/9780137904648X004/\nAnd Lesson 1.3 of Next Level Python LiveLessons\n  https://learning.oreilly.com/videos/next-level-python/9780136904083/9780136904083-NLP1_01_01_03/"
2,"Given the code:\n\njson_data = [\n\t{'a': 1, 'b': 2},\n\t{\n\t\t'c': [[4, 5], 'def'],\n\t\t'g': 6\n\t}\n]\n\njson_data[0]['a'] returns 1.\nHow would you get the value of 'f'?\n","correct = ans == 'json_data[1][\'c\'][1][2]'","The answer is json_data[1]['c'][1][2].\n\nExplanation:\n- json_data is a list\n- json_data[1] returns the dictionary {'c': [[4, 5], 'def'], 'g': 6}\n- json_data[1]['c'] returns the list [[4, 5], 'def']\n- json_data[1]['c'][1] returns the string 'def'\n- json_data[1]['c'][1][2] returns 'f'","Strings are covered in Step 5 of Scenario 2\n  https://learning.oreilly.com/scenarios/hands-on-python-foundations/9780137904648X002/\nAnd Lesson 2.7 of Introduction to Python LiveLessons\n  https://learning.oreilly.com/videos/introduction-to-python/9780135707333/9780135707333-INPY_01_02_07/\n\nLists are covered in Step 1 of Scenario 4\n  https://learning.oreilly.com/scenarios/hands-on-python-foundations/9780137904648X004/\nAnd Lesson 4.3 of Introduction to Python LiveLessons\n  https://learning.oreilly.com/videos/introduction-to-python/9780135707333/9780135707333-INPY_01_04_03/\n\nDictionaries are covered in Step 2 of Scenario 4\n  https://learning.oreilly.com/scenarios/hands-on-python-foundations/9780137904648X004/\nAnd Lesson 1.3 of Next Level Python LiveLessons\n  https://learning.oreilly.com/videos/next-level-python/9780136904083/9780136904083-NLP1_01_01_03/"
2,"Which of these data structures can have duplicate items or keys?\nEnter all correct letters, separated by spaces (e.g. 'X Y Z')\nA) Lists\nB) Dictionaries\nC) Tuples\nD) Sets","correct = {guess.upper() for guess in ans.split()} == {'A', 'C'}","A and C are correct.\n\nItems in lists and tuples are accessed by index and they can have any data.\nBy definition, sets cannot have duplicates.\nDictionaries cannot have duplicate keys.","Data structures are covered Scenario 4\n  https://learning.oreilly.com/scenarios/hands-on-python-foundations/9780137904648X004/\nAnd Lesson 5.2 of Introduction to Python LiveLessons\n  https://learning.oreilly.com/videos/introduction-to-python/9780135707333/9780135707333-INPY_01_05_02/"
2,"Given the code:\n\na = 1, 2, 3\nx, y, z = a[::-1]\n\nWhat will the value of x be?","correct = ans == '3'","The answer is 3.\n\na has the value of (1, 2, 3). Parentheses are not needed to create a tuple. This is called 'tuple packing'.\na[::-1] reverses the tuple, so it is (3, 2, 1)\nWith 'tuple unpacking', we assign x to 3, y to 2, and z to 1.","Data structures are covered Scenario 4\n  https://learning.oreilly.com/scenarios/hands-on-python-foundations/9780137904648X004/\nAnd Lesson 5.2 of Introduction to Python LiveLessons (though packing and unpacking are not covered here)\n  https://learning.oreilly.com/videos/introduction-to-python/9780135707333/9780135707333-INPY_01_05_02/"
2,"Given the code:\n\ntry:\n\tnum = input('Enter a number: ')\n\tinverse = 1 / num\nexcept TypeError:\n\tprint('A')\nexcept ZeroDivisionError:\n\tprint('B')\nexcept ValueError:\n\tprint('C')\nelse:\n\tprint('D')\nfinally:\n\tprint('E')\n\nWhich letters get printed out (separated by spaces)?","correct = ans.upper() == 'A E'","The answer is A E.\n\nAfter getting the input, we get a string.\nDividing a number by a string raises a TypeError, so 'A' gets printed.\nThe 'else' block only is reached if no exceptions were raised in 'try'.\nThe 'finally' is always reached, so 'E' is printed.","Exceptions are covered in Steps 1 and 2 of Scenario 5\n  https://learning.oreilly.com/scenarios/hands-on-python-foundations/9780137904648X005/\nAnd Lesson 1.4 of Next Level Python LiveLessons\n  https://learning.oreilly.com/videos/next-level-python/9780136904083/9780136904083-NLP1_01_01_04/"
2,"Why should you use the 'with' keyword when opening files?\nA) So you can read and write to files at the same time\nB) It gives you the ability to read CSV files with a DictReader\nC) It opens the file in 'safe' mode so you don't corrupt the data\nD) So you don't forget to close the file after you open it","correct = ans.upper() == 'D'","The answer is D.\n\nWithout the 'with' keyword, you would have to use two lines:\nfile = open('filename.txt')\n# Do something with file\nfile.close()\n\nSince it's easy to forget, you should do this instead:\nwith open('filename.txt') as file:\n\t# Do something with file\n\nand once the code exits the 'with' block, the file is automatically closed.","Opening files are covered in Step 3 of Scenario 5\n  https://learning.oreilly.com/scenarios/hands-on-python-foundations/9780137904648X005/\nAnd Lesson 2.1 of Next Level Python LiveLessons\n  https://learning.oreilly.com/videos/next-level-python/9780136904083/9780136904083-NLP1_01_02_01/"
2,"Given the file structure:\nproject/\n|\n|--data/\n|  |--input.txt\n|\n|--code/\n   |--main.py\n\nIf you are trying to open 'input.txt' inside of 'main.py', what filepath should you use in your open() function?","correct = ans.strip(&apos;&quot;&apos;).strip(&quot;&apos;&quot;) == '../data/input.txt'","You would use open('../data/input.txt').\n\nExplanation:\n- You start in the code/ folder\n- .. will navigate up to the project/ folder\n- data/ will go into the data/ folder\n- Finally, you can get to the input.txt file","Opening files are covered in Step 3 of Scenario 5\n  https://learning.oreilly.com/scenarios/hands-on-python-foundations/9780137904648X005/\nAnd Lesson 2.1 of Next Level Python LiveLessons\n  https://learning.oreilly.com/videos/next-level-python/9780136904083/9780136904083-NLP1_01_02_01/"
2,"How would you get the payload from 'response = requests.get('https://api.github.com')' as a string?\nA) response.json()\nB) response.content\nC) response.text","correct = ans.upper() == 'C'","The answer is C, response.text\n\nresponse.content returns the payload as a bytes object\nresponse.json() returns the content as json (in this case, a dict).","HTTP GET requests are covered in Step 1 of Scenario 6\n  https://learning.oreilly.com/scenarios/hands-on-python-foundations/9780137904648X006/\nAnd Lesson 7.1 of Next Level Python LiveLessons\n  https://learning.oreilly.com/videos/next-level-python/9780136904083/9780136904083-NLP1_01_07_01/"
2,"If you are trying to access an API but use an invalid API key to authenticate, what number will the status code start with?","correct = ans == '4'","The answer is 4.\n\n1xx codes are informational responses\n2xx codes are successful\n3xx codes are for redirects\n4xx codes are for client/user errors, like improper authentication\n5xx codes are for server errors","HTTP GET requests are covered in Step 1 of Scenario 6\n  https://learning.oreilly.com/scenarios/hands-on-python-foundations/9780137904648X006/\nAnd Lesson 7.1 of Next Level Python LiveLessons\n  https://learning.oreilly.com/videos/next-level-python/9780136904083/9780136904083-NLP1_01_07_01/"

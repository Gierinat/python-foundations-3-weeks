Week,Question,Answer,Explanation,Review
1,"Which of these are valid variable names?\nEnter all correct letters, separated by spaces (e.g. 'X Y Z')\nA) _helloWorld1\nB) hello-world-1\nC) 1_hello_world\nD) H3LL0W0RLD\nE) Hello.World.1","right = {'A', 'D'}\nguesses = set(ans.split(' '))\ncorrect = right == guesses or right == {guess.upper() for guess in guesses}","A and D are valid names (but neither of them are ideal).\n\nVariable names cannot:\n- Contain dashes or dots (only letters, numbers and underscores)\n- Start with a number\n- Be a reserved keyword, like 'if', 'True', or 'return'","Variable are covered in Step 2 of Scenario 2\n  https://learning.oreilly.com/scenarios/hands-on-python-foundations/9780137904648X002/\nAnd Lesson 2.2 of Introduction to Python LiveLessons\n  https://learning.oreilly.com/videos/introduction-to-python/9780135707333/9780135707333-INPY_01_02_02/"
1,"What type of error do you get if you try to use a variable that hasn't been defined?","guess = ans.lower().replace(' ', '')\ncorrect = guess in ['nameerror', 'name']","You would get a NameError.\nThis would also happen if you misspell anything or use the wrong case.","NameErrors are covered in the FAQs section of Step 1 in Scenario 2\n  https://learning.oreilly.com/scenarios/hands-on-python-foundations/9780137904648X002/"
1,"What would the result of this be (or input 'e' for error):\n'hi' * 3 + 'bye' * 2 + 1","correct = ans.lower() == 'e'","It produces a TypeError because you are trying to use the + operator on a mix of strings and integers\n=> 'hihihi' + 'byebyebye' + 1",TypeErrors are covered in Step 2 of Scenario 2\nMultiplying strings with integers is discussed in Step 4 of Scenario 2\n  https://learning.oreilly.com/scenarios/hands-on-python-foundations/9780137904648X002/
1,"Which statement best describes getting errors in Python?\nA) They are a normal part of programming, but are best to be avoided\nB) They happen frequently and you need to get good at fixing them\nC) They show that you don't know what you're doing\nD) They are really bad and can break your computer","correct = ans.upper() == 'B'","Errors are a part of all programmers lives, both novice and experienced.\nExperienced programmers may be able to diagnose an error faster and may easily avoid basic ones.\nThey may also try to anticipate errors that could arise when their program gets into an unexpected state.\n\nYou can avoid SyntaxErrors and NameErrors by using a smart IDE for your development, like PyCharm.","Reading error messages is covered in Step 4 of Scenario 2\n  https://learning.oreilly.com/scenarios/hands-on-python-foundations/9780137904648X002/\nAnd lesson of Introduction to Python LiveLessons\n  https://learning.oreilly.com/videos/introduction-to-python/9780135707333/9780135707333-INPY_01_02_03/\n\nWe will look at how to handle errors gracefully in Scenario 5\n  https://learning.oreilly.com/scenarios/hands-on-python-foundations/9780137904648X005/"
1,"What would 'HeLlO wOrLd'.title().swapcase() return?","correct = ans.strip(&apos;&quot;&apos;).strip(&quot;&apos;&quot;) == 'HeLlO wOrLd'.title().swapcase()","'HeLlO wOrLd'.title() would return 'Hello World'\n'Hello World'.swapcase() would return 'hELLO wORLD'\n\nSince a string is returned from each of these, you can chain them together.","String methods are covered in Step 5 of Scenario 2\n  https://learning.oreilly.com/scenarios/hands-on-python-foundations/9780137904648X002/\nAnd Lesson 2.7 of Introduction to Python LiveLessons\n  https://learning.oreilly.com/videos/introduction-to-python/9780135707333/9780135707333-INPY_01_02_07/"
1,"What would the value of 'num' be, given the following code:\n\ndef next_num(n):\n\tif n % 2 == 0:\n\t\treturn n // 2\n\treturn n*3 + 1\n\nnum = next_num(next_num(next_num(9)))","correct = ans == '7'","The answer is 7.\nYou can nest function calls.\n\nnum = next_num(next_num(next_num(9))) is like saying:\n- num = next_num(9)  # 28\n- num = next_num(28)  # 14\n- num = next_num(14)  # 7\n- num = 7","Functions are covered in Step 1 of Scenario 3\n  https://learning.oreilly.com/scenarios/hands-on-python-foundations/9780137904648X003/\nAnd Lesson 2.6 of Introduction to Python LiveLessons\n  https://learning.oreilly.com/videos/introduction-to-python/9780135707333/9780135707333-INPY_01_02_06/"
1,"Recursive functions are ones that call themselves. Here's one:\ndef my_func(n):\n\tif n == 1:\n\t\treturn 1\n\treturn n + my_func(n - 1)\n\nWhat would my_func(4) return?","correct = ans == '10'","The answer is 10.\n\nThis could be expanded to:\n- 4 + my_func(3)\n- 4 + 3 + my_func(2)\n- 4 + 3 + 2 + my_func(1)\n- 4 + 3 + 2 + 1\n- 10","Functions are covered in Step 1 of Scenario 3\n  https://learning.oreilly.com/scenarios/hands-on-python-foundations/9780137904648X003/\nAnd Lesson 2.6 of Introduction to Python LiveLessons\n  https://learning.oreilly.com/videos/introduction-to-python/9780135707333/9780135707333-INPY_01_02_06/"
1,"What message would be printed out to the console?\n\nmsg = ''\nif 3 < 3:\n\t msg += 'a'\nelif 3 <= 3:\n\t msg += 'b'\n\t if 3 >= 3:\n\t\t msg += 'c'\nelif 3 == 3:\n\t msg += 'd'\nif 3 != 3:\n\t msg += 'e'\nelse:\n\t msg += 'f'\nprint(msg)","correct = ans == 'bcf'","The answer is 'bcf'\n\nExplanation:\n- no 'a': 3 is not less than 3\n- yes 'b': 3 is equal to 3\n- yes 'c': 'b' was reached and it is in the same code block (and 3 >= 3)\n- no 'd': even though it is True, a previous condition was met, so it isn't evaluated\n- no 'e': it's a new if-statement, so it is evaluated, but it is not met (!= means 'not equal')\n- yes 'f': the previous condition was not met","Comparisons (True or False) are covered in Step 2 of Scenario 3\nIf-statements (conditionals) are covered in Step 3 of Scenario 3\n  https://learning.oreilly.com/scenarios/hands-on-python-foundations/9780137904648X003/\nAnd Lessons 3.2 (comparisons) and 3.3 (if-statements) of Introduction to Python LiveLessons\n  https://learning.oreilly.com/videos/introduction-to-python/9780135707333/9780135707333-INPY_01_03_02/\n  https://learning.oreilly.com/videos/introduction-to-python/9780135707333/9780135707333-INPY_01_03_03/"
1,"When will a while-loop stop looping?\nEnter all correct letters, separated by spaces (e.g. 'X Y Z')\nA) When the 'continue' keyword is reached\nB) When the 'break' keyword is reached\nC) When the 'while' condition is False\nD) When the 'while' condition is True\nE) When the program is stopped by the user","correct = {guess.upper() for guess in ans.split()} == {'B', 'C', 'E'}","B, C and E are correct.\n\nTo stop a program manually:\n- In the command line, hit CTRL + C\n- In the PyCharm Run tab, hit the stop button","While-loops are covered in Step 4 of Scenario 3\n  https://learning.oreilly.com/scenarios/hands-on-python-foundations/9780137904648X003/\nAnd Lesson 4.1 of Introduction to Python LiveLessons\n  https://learning.oreilly.com/videos/introduction-to-python/9780135707333/9780135707333-INPY_01_04_01/"
1,"What would be the final value of x, given:\n\nx = ''\nfor quack in range(4):\n\tif quack % 2 == 0:\n\t\tx += 'a' * quack\n\telse:\n\t\tx += 'b' * quack","correct = ans == 'baabbb'","The answer is 'baabbb'.\n\nKey points:\n- range(n) returns the numbers 0, 1, ..., n-1, so range(4) returns 0, 1, 2, 3\n- The variable 'quack' will start with the value of 0, then 1, then 2, and finally 3\n- num % 2 == 0 checks if a number is even. The modulo operator (%) returns the remainder of num / 2\n- x += 'a' * quack will add 'quack' number of 'a's to 'x'\n\nIn this example, you can see the importance of good variable names.\n- The variable 'quack' is normally 'i', but it can have any name\n- The variable name 'x' is usually used for integers, not strings\n\nNote: for-loops might be a difficult concept to grasp if you are completely new to programming.","For-loops are covered in Step 4 of Scenario 3\n  https://learning.oreilly.com/scenarios/hands-on-python-foundations/9780137904648X003/\nAnd Lesson 4.4 of Introduction to Python LiveLessons\n  https://learning.oreilly.com/videos/introduction-to-python/9780135707333/9780135707333-INPY_01_04_04/"